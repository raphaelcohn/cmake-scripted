#!/usr/bin/env sh
# This file is part of cmake-scripted. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/cmake-scripted/master/COPYRIGHT. No part of cmake-scripted, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of cmake-scripted. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/cmake-scripted/COPYRIGHT.

cmake_scripted_prepareOutputPath()
{
	xxxx: Build Lock

	if [ -d "$cmake_scripted_outputPath" ]; then
		return 0
	fi

	if [ -e "$cmake_scripted_outputPath" ]; then
		rm -rf "$cmake_scripted_outputPath"
	fi

	mkdir -m 0755 -p "$cmake_scripted_outputPath"
}

_cmake_scripted_initialiseCMake()
{
	# cmake initialises whateer folder is PWD
	pushd "$projectBuildPath"
	
		cmake "$projectSourcePath" 1>"$projectBuildPath"/cmake.config.txt 2>/dev/null
	
	popd 1>/dev/null
}

cmake_scripted_compileProjects()
{
	local project
	local projectSourcePath
	local projectBuildPath
	for project in "${cmake_scripted_projects[@]}"
	do
		projectSourcePath="$cmake_scripted_sourcePath"/"$project"
		if [ ! -d "$projectSourcePath" ]; then
			core_exitError "Project '$project' is not in cmake_scripted_sourcePath '$cmake_scripted_sourcePath'"
		fi
	
		projectBuildPath="$cmake_scripted_outputPath"/"$project"
		if [ -e "$projectBuildPath" ]; then
			rm -rf "$projectBuildPath"
		fi
		mkdir -m 0755 -p "$projectBuildPath"
	
		_cmake_scripted_initialiseCMake

		# target could be 'clean', or we could clean first, with --clean-first
		cmake --build "$projectBuildPath" --target "$project" --clean-first --use-stderr -- --jobs "$cpucount_makeJobs" --load-average "$cpucount_makeLoadAverage"
	done
}

_program()
{
	cpucount_computeMakeJobsAndLoadAverage
	cmake_scripted_prepareOutputPath
	cmake_scripted_compileProjects
}

readonly _program_name='cmake-scripted'
readonly _program_version='unversioned'
readonly _program_package_or_build=''
readonly _program_copyright='(C) 2014 Raphael Cohn'
readonly _program_licence='AGPLv3'
# optionally add ' and others' - can be discovered from source control
readonly _program_written_by='Raphael Cohn'
readonly _program_path="$([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}")"
readonly _program_libPath="${_program_path}/../lib"
readonly _program_etcPath="${_program_path}/../etc"
# Should be used by the compiler prefix with 'core'
readonly _program_uses='cpucount'

_program_commandLine_parseInitialise()
{
	# Might be needed in help text
	_program_default_cmake_scripted_sourcePath="$global_ourSymlinkPath"/source
	_program_default_cmake_scripted_outputPath="$global_ourSymlinkPath"/output
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]... -- [PROJECTS]..."
	_program_commandLine_helpMessage_description="Builds projects using CMake."
	_program_commandLine_helpMessage_options=""
	_program_commandLine_helpMessage_optionsSpacing=''
	_program_commandLine_helpMessage_configurationKeys=$'\n'
	_program_commandLine_helpMessage_examples="
  ${global_ourName} -v 2
"
}

_program_commandLine_optionExists()
{
	# optionName
	echo "no"
}

_program_commandLine_processOptionWithoutArgument()
{
	# optionName
	:
}

_program_commandLine_processOptionWithArgument()
{
	# optionName optionValue
	:
}

_program_commandLine_handleNonOptions()
{
	if [ $# -eq 0 ]; then
		core_exitError "No projects specified"
	fi
	
	# TODO: Not sh friendly, and objects violently if dash as a syntax error!
	# Problem is we want to preserve in an array if using bash 4...
	
	xxxx: initialise varargs
	#cmake_scripted_projects=("$@")
}

_program_commandLine_validate()
{
	core_init_compatibility_setVariableIfUnset cmake_scripted_sourcePath "$_program_default_cmake_scripted_sourcePath"
	core_init_compatibility_setVariableIfUnset cmake_scripted_outputPath "$_program_default_cmake_scripted_outputPath"
		
	if [ ! -e "$cmake_scripted_sourcePath" ]; then
		core_exitError "The cmake_scripted_sourcePath '$cmake_scripted_sourcePath' does not exist"
	fi
	if [ ! -d "$cmake_scripted_sourcePath" ]; then
		core_exitError "The cmake_scripted_sourcePath '$cmake_scripted_sourcePath' is not a directory"
	fi
	if [ ! -r "$cmake_scripted_sourcePath" ]; then
		core_exitError "The cmake_scripted_sourcePath '$cmake_scripted_sourcePath' is not a readable directory"
	fi
	if [ ! -r "$cmake_scripted_sourcePath" ]; then
		core_exitError "The cmake_scripted_sourcePath '$cmake_scripted_sourcePath' is not a searchable directory"
	fi
	
	# cmake_scripted_outputPath may not exist at this point in time
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
